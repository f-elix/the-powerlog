# CUSTOM SCALAR TYPES
scalar Date

# TYPES
type User {
	_id: ID
	name: String!
	email: String!
	password: String!
	createdAt: String!
	log: [Session]
}

type Session {
	_id: ID!
	createdAt: String
	updatedAt: String
	title: String!
	sessionDate: Date!
	exercises: [SessionExercise]
	notes: String
	bodyweigth: Bodyweight
	creator: User
}

type Bodyweight {
	amount: Int
	unit: String
}

type SessionExercise {
	movements: [Movement]
}

type Movement {
	exercise: Exercise
	executions: [Execution]
}

type Execution {
	sets: Int
	repsOrTime: RepsOrTime
	weight: Weight
	restTime: RestTime
}

type RepsOrTime {
	amount: Int
	unit: String
}

type Weight {
	amount: Int
	unit: String
}

type RestTime {
	amount: Int
	unit: String
}

type Exercise {
	_id: ID!
	name: String
	history: [ExerciseHistory]
	group: ExerciseGroup
	creator: User
}

type ExerciseHistory {
	session: Session!
	date: Date
	executions: [Execution]
}

type ExerciseGroup {
	_id: ID!
	name: String
	color: String
	exercises: [Exercise]
	creator: User
}

type AuthData {
	token: String!
}

# INPUT TYPES
input SessionInput {
	_id: ID
	name: String!
	date: Date!
	exercises: [SessionExerciseInput]
	bodyweight: BodyweightInput
	notes: String
}

input BodyweightInput {
	amount: Int
	unit: String
}

input SessionExerciseInput {
	movements: [MovementInput]
}

input MovementInput {
	exercise: ExerciseInput
	executions: [ExecutionInput]
}

input ExerciseInput {
	_id: ID
	name: String
	group: ExerciseGroupInput
}

input ExecutionInput {
	sets: Int
	repsOrTime: RepsOrTimeInput
	weight: WeightInput
	restTime: RestTimeInput
}

input RepsOrTimeInput {
	amount: Int
	unit: String
}

input WeightInput {
	amount: Int
	unit: String
}

input RestTimeInput {
	amount: Int
	unit: String
}

input ExerciseGroupInput {
	_id: ID
	name: String
	color: String
	exercises: [ExerciseInput]
}

# ROOT
type Query {
	isAuth(token: String!): Boolean
	getUserData: User
	getSessionById(sessionId: ID!): Session
	getSessionsByDate(sessionDate: Date!): [Session]
	getSessionsByTitle(title: String!): [Session]
	getSessionsFromTo(fromDate: Date!, toDate: Date!): [Session]
	getSessionRange(from: Int!, to: Int!): [Session]
	getExerciseById(exerciseId: ID!): Exercise
	getExercisesByName(name: String!): [Exercise]
	getAllExercises: [Exercise]
}

type Mutation {
	signupUser(name: String!, email: String!, password: String!): AuthData!
	loginUser(email: String!, password: String!): AuthData!
	saveSession(sessionData: SessionInput!): Session!
	deleteSession(sessionId: ID!): Boolean
	saveExercise(exerciseData: ExerciseInput!): Exercise!
	deleteExercise(exerciseId: ID!): Boolean
}
