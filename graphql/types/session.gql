# SESSION TYPE
type Session {
	_id: ID!
	createdAt: String
	updatedAt: String
	name: String!
	date: Date!
	exercises: [SessionExercise]
	notes: String
	templateInstructions: String
	bodyweigth: Bodyweight
	creator: User
}

type Bodyweight {
	amount: Float
	unit: String
}

type SessionExercise {
	_id: ID
	movements: [Movement]
}

type Movement {
	_id: ID
	exercise: Exercise
	executions: [Execution]
}

type Execution {
	_id: ID
	sets: Float
	reps: Float
	time: Time
	load: Load
}

type Time {
	amount: Float
	unit: String
}

type Load {
	amount: Float
	unit: String
}

# SESSION INPUTS
input SessionInput {
	_id: ID
	name: String!
	date: Date!
	exercises: [SessionExerciseInput]
	bodyweight: BodyweightInput
	notes: String
	templateInstructions: String
}

input BodyweightInput {
	amount: Float
	unit: String
}

input SessionExerciseInput {
	_id: ID
	movements: [MovementInput]
}

input MovementInput {
	_id: ID
	exercise: ExerciseInput
	executions: [ExecutionInput]
}

input ExecutionInput {
	_id: ID
	sets: Float
	reps: Float
	time: TimeInput
	load: LoadInput
}

input TimeInput {
	amount: Float
	unit: String
}

input LoadInput {
	amount: Float
	unit: String
}

# ROOT
type Query {
	getSessionById(sessionId: ID!): Session
	getSessionsByDate(date: Date!): [Session]
	getSessionsByName(name: String!): [Session]
	getSessionsFromTo(fromDate: Date!, toDate: Date!): [Session]
	getSessionRange(from: Int!, to: Int!): [Session]
}

type Mutation {
	saveSession(sessionData: SessionInput!): Session!
	deleteSession(sessionId: ID!): Boolean
}
